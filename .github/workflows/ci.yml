name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  packages: read
  checks: write

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true

jobs:
  build-and-test:
    name: Build and Test Project
    runs-on: windows-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/Directory.Packages.props', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore Dependencies
        shell: pwsh
        working-directory: ./src
        run: |
          Write-Host "Restoring solution dependencies..."
          dotnet restore idasen-desk-core.sln --verbosity minimal

      - name: Build Solution (Debug)
        shell: pwsh
        working-directory: ./src
        run: |
          Write-Host "Building solution in Debug configuration..."
          dotnet build idasen-desk-core.sln --configuration Debug --no-restore --verbosity minimal

      - name: Build Solution (Release)
        shell: pwsh
        working-directory: ./src
        run: |
          Write-Host "Building solution in Release configuration..."
          dotnet build idasen-desk-core.sln --configuration Release --no-restore --verbosity minimal

      - name: Run Unit Tests
        shell: pwsh
        working-directory: ./src
        run: |
          Write-Host "Running unit tests with code coverage..."
          $testProjects = Get-ChildItem -Recurse -Filter "*.Tests.csproj" | Where-Object { $_.Name -notmatch 'Integration\.Tests' }
          
          if (-not $testProjects) {
            Write-Host "No unit test projects found."
            exit 0
          }
          
          $failed = $false
          foreach ($proj in $testProjects) {
            Write-Host "Running tests for: $($proj.Name)"
            dotnet test $proj.FullName `
              --configuration Release `
              --no-build `
              --logger "trx;LogFileName=$($proj.BaseName)-results.trx" `
              --collect:"XPlat Code Coverage" `
              --results-directory ./TestResults `
              --verbosity normal || { $failed = $true }
          }
          
          if ($failed) {
            Write-Error "One or more test projects failed."
            exit 1
          }

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ github.run_number }}
          path: src/TestResults/
          retention-days: 30

      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Unit Test Results
          path: 'src/TestResults/*.trx'
          reporter: dotnet-trx
          fail-on-error: true

      - name: Check Integration Tests
        if: always()
        shell: pwsh
        working-directory: ./src
        run: |
          $integrationTests = Get-ChildItem -Recurse -Filter "*.Tests.csproj" | Where-Object { $_.Name -match 'Integration\.Tests' }
          if ($integrationTests) {
            Write-Warning "Integration test projects found but not executed in CI:"
            $integrationTests | ForEach-Object { Write-Warning "  - $($_.Name)" }
            Write-Warning "Integration tests should be run separately with appropriate environment setup."
          } else {
            Write-Host "No integration test projects detected."
          }
