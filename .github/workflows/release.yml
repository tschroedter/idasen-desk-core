name: Release

on:
  workflow_dispatch:
    inputs:
      version-bump:
        description: 'Version bump type (patch, minor, major, prerelease)'
        required: true
        default: 'patch'
      prerelease-tag:
        description: 'Prerelease tag (e.g., beta, rc). Only used when bump type = prerelease.'
        required: false
        default: ''

permissions:
  contents: write      # for creating tag & release
  packages: write      # if publishing to GitHub Packages
  id-token: write      # for NuGet.org publish (OIDC)

env:
  PROJECT_FILE: src/Idasen.Launcher/Idasen.Launcher.csproj
  SLN_DIR: src
  PACKAGE_OUTPUT: output

jobs:
  bump-build-tag-publish:
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Determine current version
        id: get_version
        shell: pwsh
        run: |
          [xml]$proj = Get-Content $env:PROJECT_FILE
          $node = $proj.Project.PropertyGroup | Where-Object { $_.VersionPrefix } | Select-Object -First 1
          if (-not $node) { Write-Error 'VersionPrefix not found in project file.'; exit 1 }
          $current = $node.VersionPrefix
          Write-Host "Current version: $current"
          echo "current-version=$current" >> $GITHUB_OUTPUT

      - name: Calculate next version
        id: bump
        shell: pwsh
        run: |
          $bump = '${{ github.event.inputs.version-bump }}'
          $preTag = '${{ github.event.inputs.prerelease-tag }}'
          $current = '${{ steps.get_version.outputs.current-version }}'
          if (-not $current) { Write-Error 'Current version missing'; exit 1 }
          $parts = $current.Split('.')
          if ($parts.Length -lt 3) { Write-Error 'Version must have at least major.minor.patch'; exit 1 }
          $major = [int]$parts[0]; $minor = [int]$parts[1]; $patch = [int]$parts[2]
          switch ($bump) {
            'major' { $major++; $minor=0; $patch=0 }
            'minor' { $minor++; $patch=0 }
            'patch' { $patch++ }
            'prerelease' { }
            default { Write-Error "Unsupported bump type: $bump"; exit 1 }
          }
          $newVersion = "$major.$minor.$patch"
          if ($bump -eq 'prerelease') {
            if (-not $preTag) { $preTag = 'beta' }
            # Append or increment prerelease tag using - prerelease.N pattern
            if ($current -match "^(\\d+\\.\\d+\\.\\d+)(?:-($preTag)(\\.(\\d+))?)?$") {
              $base = $Matches[1]
              $num = $Matches[4]
              if ($num) { $num = [int]$num + 1 } else { $num = 1 }
              $newVersion = "$base-$preTag.$num"
            } else {
              $newVersion = "$newVersion-$preTag.1"
            }
          }
          echo "new-version=$newVersion" >> $GITHUB_OUTPUT
          Write-Host "New version: $newVersion"

      - name: Update VersionPrefix in project file
        shell: pwsh
        run: |
          $file = $env:PROJECT_FILE
          $newVersion = '${{ steps.bump.outputs.new-version }}'
          (Get-Content $file) |
            ForEach-Object { $_ -replace '<VersionPrefix>.*?</VersionPrefix>', "<VersionPrefix>$newVersion</VersionPrefix>" } |
            Set-Content $file
          Write-Host "Updated VersionPrefix to $newVersion"

      - name: Commit version bump
        shell: pwsh
        run: |
          $newVersion = '${{ steps.bump.outputs.new-version }}'
          git config user.name 'github-actions'
          git config user.email 'github-actions@users.noreply.github.com'
          git add $env:PROJECT_FILE
          if (git diff --cached --quiet) { Write-Host 'No changes to commit'; exit 0 }
          git commit -m "chore: bump version to $newVersion"

      - name: Create tag
        if: steps.bump.outputs.new-version != ''
        shell: pwsh
        run: |
          $tag = 'v' + '${{ steps.bump.outputs.new-version }}'
          git tag $tag
          git push origin HEAD:main --tags

      - name: Restore
        run: dotnet restore $SLN_DIR

      - name: Build
        run: dotnet build $SLN_DIR --configuration Release --no-restore /p:ContinuousIntegrationBuild=true

      - name: Pack
        run: dotnet pack $SLN_DIR/Idasen.Launcher/Idasen.Launcher.csproj --configuration Release --no-build --output $PACKAGE_OUTPUT /p:PackageVersion=${{ steps.bump.outputs.new-version }}

      - name: Publish to NuGet.org
        if: success()
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          if (-not "$env:NUGET_API_KEY") { echo 'NUGET_API_KEY secret not set, skipping publish.'; exit 0 }
          dotnet nuget push "$env:PACKAGE_OUTPUT/*.nupkg" --api-key "$env:NUGET_API_KEY" --source https://api.nuget.org/v3/index.json --skip-duplicate

      - name: Publish to GitHub Packages (optional)
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $pkgs = Get-ChildItem "$env:PACKAGE_OUTPUT" -Filter *.nupkg
          if ($pkgs.Count -eq 0) { Write-Host 'No packages found.'; exit 0 }
          foreach ($p in $pkgs) {
            dotnet nuget push $p.FullName --api-key $env:GITHUB_TOKEN --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --skip-duplicate
          }

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.bump.outputs.new-version }}
          name: v${{ steps.bump.outputs.new-version }}
          draft: false
          prerelease: ${{ contains(steps.bump.outputs.new-version, '-') }}
          files: |
            ${{ env.PACKAGE_OUTPUT }}/*.nupkg
